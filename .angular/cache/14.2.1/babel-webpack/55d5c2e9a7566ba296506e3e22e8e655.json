{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let LocalStorageService = /*#__PURE__*/(() => {\n  class LocalStorageService {\n    constructor() {\n      if (!localStorage) {\n        throw new Error('Current browser does not support Local Storage');\n      }\n\n      this.localStorage = localStorage;\n    }\n\n    init(config, key) {\n      if (!key) {\n        throw new Error('Local Storage key not provided');\n      }\n\n      this.key = key;\n\n      if (localStorage.getItem(key) === null) {\n        this.config = config;\n        this.emptyItemsInKey();\n      } else {\n        // Check if config is already set\n        const lsConfig = this.getConfig();\n\n        if (typeof lsConfig === 'object') {\n          this.config = lsConfig;\n        } else {\n          this.saveConfig(config);\n          this.config = config;\n        }\n      }\n    }\n\n    getAll() {\n      const lSData = JSON.parse(localStorage.getItem(this.key));\n      return lSData['data'];\n    }\n\n    add(obj) {\n      const lsItems = this.getAll();\n      lsItems.push(obj);\n      this.writeLS(lsItems);\n    }\n\n    addMultiple(array) {\n      const lsItems = this.getAll();\n\n      for (let i = 0; i < array.length; i++) {\n        lsItems.push(array[i]);\n      }\n\n      this.writeLS(lsItems);\n    }\n\n    writeLS(array) {\n      localStorage.setItem(this.key, JSON.stringify({\n        config: this.config,\n        data: array\n      }));\n    }\n\n    updateItem(key, propertyName, obj) {\n      const lsItems = this.getAll();\n\n      for (let i = 0; i < lsItems.length; i++) {\n        const item = lsItems[i];\n\n        if (item[propertyName] === key) {\n          lsItems[i] = obj;\n          this.writeLS(lsItems);\n          break;\n        }\n      }\n    }\n\n    removeItem(key) {\n      const lsItems = this.getAll(),\n            newData = [];\n      let foundItem = false,\n          iter = 0;\n\n      while (iter < lsItems.length) {\n        if (key !== lsItems[iter]['id']) {\n          newData.push(lsItems[iter]);\n        } else {\n          foundItem = true;\n        }\n\n        iter++;\n      }\n\n      this.writeLS(newData);\n      return foundItem;\n    }\n\n    update(obj) {\n      const lsItems = this.getAll(),\n            newData = [];\n      let updated = false;\n\n      for (let i = 0; i < lsItems.length; i++) {\n        if (lsItems[i]['id'] === obj['id']) {\n          lsItems[i] = obj;\n          updated = true;\n        }\n      }\n\n      this.writeLS(lsItems);\n      return updated;\n    }\n\n    getItem(id) {\n      const lsItems = this.getAll(),\n            newData = [],\n            foundIt = false;\n\n      for (let i = 0; i < lsItems.length; i++) {\n        if (lsItems[i]['id'] === id) {\n          return lsItems[i];\n        }\n      }\n\n      return foundIt;\n    }\n\n    getNrOfItems() {\n      return this.getAll().length;\n    }\n\n    emptyItemsInKey() {\n      localStorage.setItem(this.key, JSON.stringify({\n        config: this.config,\n        data: []\n      }));\n    }\n\n    clear() {\n      this.localStorage.removeItem(this.key);\n    }\n\n    getConfig() {\n      const lSData = JSON.parse(localStorage.getItem(this.key));\n\n      if (!lSData['config']) {\n        return false;\n      }\n\n      return lSData['config'];\n    }\n\n    uppdatePropertyOnAll(propertyName, newValue) {\n      const lsData = this.getAll();\n      let touched = false;\n\n      for (let i = 0; i < lsData.length; i++) {\n        if (lsData[i].hasOwnProperty(propertyName)) {\n          lsData[i][propertyName] = newValue;\n          touched = true;\n        }\n      }\n\n      if (touched) {\n        this.writeLS(lsData);\n      }\n    }\n\n    saveConfig(config) {\n      const lSData = JSON.parse(localStorage.getItem(this.key));\n      localStorage.setItem(this.key, JSON.stringify({\n        config: config,\n        data: lSData['data']\n      }));\n    }\n\n  }\n\n  LocalStorageService.ɵfac = function LocalStorageService_Factory(t) {\n    return new (t || LocalStorageService)();\n  };\n\n  LocalStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocalStorageService,\n    factory: LocalStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocalStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}